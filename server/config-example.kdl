// listen
// Listen configuration is a string defining to what address/port the web server should listen.
// An IP address of 0.0.0.0 or [::] can be used to listen on all available addresses. As described in the README, it's
// recommended to set this up listening only on localhost and reverse proxy it through another web server (like nginx).
listen "127.0.0.1:8081"

// database
// This has the configuration needed to connect to the database.
database {
	// host
	// This is where the PostgreSQL database is hosted.
	host "localhost"

	// port
	// If PostgreSQL is set up with a nonstandard port, specify that here.
	// port 5432

	// username
	// The username of Stream Log's user in PostgreSQL
	username "streamlog"

	// password
	// The password for Stream Log's user in PostgreSQL
	password "streamlog" // Don't use this password! Replace this with something more secure.

	// database
	// The name of the Stream Log database
	database "stream_log"
}

// openid
// This section contains configuration for an OpenID Connect provider. Stream Log does authentication exclusively using
// OpenID Connect (it does not have its own authentication functionality). There are many services (such as Google) that
// allow you to use their accounts to identify for other services. You can also set this up yourself using programs such
// as Keycloak. Stream Log stores user IDs provided to us by the OpenID Connect provider that you choose. These are
// specific to the service you're using for OpenID Connect service and won't carry over if you attempt to migrate to
// another service. Currently, Stream Log does not have a streamlined way to migrate OpenID Connect services.
// The example below uses Google as the OpenID Connect provider.
openid {
	// endpoint
	// This is the host of the service that runs the OpenID Connect service. For a Keycloak setup, this would be
	// https://your-keycloak-host.example.com/realms/stream-log, where "stream-log" is the realm ID of the realm you're
	// using for Stream Log accounts.
	endpoint "https://accounts.google.com"

	// client-id
	// This is the client ID you must provide as an OpenID Connect client. You can get this when setting up your OpenID
	// Connect connection with the provider. For a Keycloak setup, this is the Client ID you specified for the client,
	// which was set up in the Clients section of your realm configuration.
	client-id "YOUR CLIENT ID HERE"

	// secret
	// This is the client secret provided alongside the client ID from your OpenID Connect provider. Most providers will
	// require this. If you're using Keycloak, you may leave it blank.
	secret "YOUR CLIENT SECRET HERE"

	// response-url
	// This is the URL that clients get redirected to when authentication over OpenID Connect is successful. This must
	// be set to the full URL of your base Stream Log install with "/callback" added. For example:
	// - If you're hosting at https://example.com/stream-log, you would set this to
	//   https://example.com/stream-log/callback).
	// - If you're hosting at https://stream-log.example.com, you would set this to
	//   https://stream-log.example.com/callback.
	// You may need to configure this as a redirect URI with your identity service; the redirect URI you register
	// with the identity service should match this exactly.
	response-url "https://stream-log.example.com/callback"

	// logout-url
	// This is the OpenID Connect provider's URL for logging clients out when they log out of Stream Log. Clients are
	// redirected here as part of the logout flow, which prevents them from automatically immediately logging back in
	// when they visit the page again. For a Keycloak setup, this would be
	// https://your-keycloak-host.example.com/realms/stream-log/protocol/openid-connect/logout, where "stream-log" is
	// the realm ID of the realm you're using for Stream Log accounts.
	logout-url "https://www.google.com/accounts/Logout"
}

// session-secret-key-file
// Stream Log requires a secret key for encryption of session data. It must be at least 32 bytes long and generated by a
// cryptographically secure random number generator. We recommend using at least 128 bytes.
// The value of this option is the name of a file containing the raw bytes of the key.
// On Linux systems, /dev/urandom is cryptographically secure and therefore useful for this purpose. You can grab 128
// bytes using this command: `dd if=/dev/urandom of=session-secret bs=128 count=1`
session-secret-key-file "session-secret"

// favicon-file
// Optionally, if you're hosting your site at the root of your domain/subdomain, you can use this option to serve a
// favicon from Stream Log. Specify a file path to a file that will be served when favicon.ico is requested.
// Uncomment this option if you need it.
// favicon-file "/home/user/favicon.ico"